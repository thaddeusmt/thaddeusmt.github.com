<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CMS | Chili Pepper Design]]></title>
  <link href="http://thaddeusmt.github.com/blog/categories/cms/atom.xml" rel="self"/>
  <link href="http://thaddeusmt.github.com/"/>
  <updated>2012-12-20T23:45:39-07:00</updated>
  <id>http://thaddeusmt.github.com/</id>
  <author>
    <name><![CDATA[Evan Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Facebook Content Management System (CMS) for Facebook Page Templates]]></title>
    <link href="http://thaddeusmt.github.com/2010/03/24/a-facebook-content-management-system-cms-for-facebook-page-templates/"/>
    <updated>2010-03-24T00:58:00-06:00</updated>
    <id>http://thaddeusmt.github.com/2010/03/24/a-facebook-content-management-system-cms-for-facebook-page-templates</id>
    <content type="html"><![CDATA[<p><a href="http://www.splashlabsocial.com"><img src="http://www.chilipepperdesign.com/images/53t.jpg" style="float: left; margin-right: 10px;" /></a></p>

<p style="font-size:1.2em;"><strong>Update: The project is now live and ready for signups! Head over to <a href="http://splashlabsocial.com">SplashLab Social</a> to learn more and get started. It's the easiest way to create and manage content on your Facebook Page's iframe tabs!</strong></p>




<br />


<br />


<br />


<p>There's something big in the works here at Chili Pepper Design I wanted to share on my blog quickly:</p>




<h3><strike>Coming Soon:</strike> A Facebook Fan Page CMS!</h3>




<p>Right now the social networking site <a href="http://www.facebook.com">Facebook</a> is quickly becoming the king of the web. Some sources claim that Facebook has <a href="http://www.guardian.co.uk/technology/blog/2010/mar/15/facebook-passes-google-share-us">passed Google</a> as the most visited website on the web. For this reason <a href="http://www.facebook.com/advertising/?pages">Fan Pages</a> are becoming an important part of the marketing strategies of small businesses and large corporations alike. Setting up a Fan Page is faster and cheaper than setting up a website, and allows customers to interact with the business/brand (and share it with their friends) in ways that traditional web pages do not.</p>




<p>These Facebook Fan Pages consist of a series of "tabs". In addition to the Wall, and the usual Photos, Videos, Discussion and Reviews tabs, many businesses are adding custom FBML tabs. These provide additional information and a touch of that business' personality and brand. These nicely designed tabs offer special promotions, games, contests, product information, shopping options, blog and twitter feeds, and much more. For some great examples of what can be accomplished with custom FBML tabs check out the <a href="http://facebookshowcase.net">Facebook Showcase</a>.</p>




<p>The one drawback to these otherwise-awesome custom page tabs is that they require a bit of technical savvy to set up. Some require the creation of a custom application, and even making a simple tab with the <a href="http://www.facebook.com/apps/application.php?id=4949752878">Static FBML</a> application requires FBML coding. There are many tutorials that cover how to set up custom tabs (like my own <a href="http://www.chilipepperdesign.com/2009/10/11/how-to-make-custom-facebook-fan-page-tabs-with-fbml-part-2">FBML tab tutorial here</a>), but frankly it's easier to set up an <em>entire new website</em> with services like <a href="http://wordpress.com">WordPress.com</a> and <a href="http://www.blogger.com/">Blogger</a> than to set up a custom FBML tab.</p>




<p>And even once a tab is set up, it is difficult to update it. The FBML code must be edited again, just like when it was first set up. This is one area where websites running Content Management Systems (CMSs) like Drupal and Wordpress are far ahead of custom facebook tabs. Editing a page in Drupal is as easy as composing an email - no coding needed!

<p><em>But what if creating a custom FBML tab was just as simple as setting up blog on Blogger? Just sign up, choose a design template, enter the content, and you're done?</em></p>

<p><em>What if updating a custom FBML tab was as simple as updating a page on a Drupal website? Just log in, change the content, and hit "Update"?</em></p>

<h2>Enter the Facebook CMS</h2>

<p>This is exactly the problem that Chili Pepper Design is working on addressing. With the <strong>Facebook Content Management System</strong> currently in development it will be easy as pie to create and update custom FBML tabs with nice templates on a Fan Page.</p>

<p>Here's how it will work:</p>

<ol>
<li>Create a Facebook Fan Page</li>
<li>Go to the Facebook CMS website and create an account</li>
<li>Choose a template for your tab</li>
<li>Enter the content for the tab (using an easy WYSIWYG editor like Word)</li>
<li>Save the new Tab</li>
<li>Add the Facebook Application to the Fan Page (one click "Add to Page")</li>
<li>DONE!</li>
</ol>

<p>Here are some of the many components that the templates will have (in various combinations):</p>

<ul>
<li>company logo</li>
<li>multiple tabs/sub navigation</li>
<li>body content</li>
<li>custom images</li>
<li>flash videos</li>
<li>sidebar blocks</li>
<li>Twitter feeds</li>
<li>blog feeds</li>
<li>comment area</li>
<li>share buttons</li>
<li>invite fiends</li>
</ul>

<p>The templates will be professionally designed, optimized for SEO, and have the ability to customize some of the colors.</p>

<h3>For Facebook Designers</h3>

<p>Are you a Facebook designer? Would like to provide your clients with an easy way to update the pages you have created for them? In addition to the standard templates, the Facebook CMS will offer a special product for designers to plug the CMS into their designs. The details on this have not been worked out, but it is a service I very much want to offer, along the lines of <a href="http://cushycms.com/">Cushy CMS</a> or <a href="http://surrealcms.com/">Surreal CMS</a>.</p>

<p><strong>Check out <a href="http://www.splashlabsocial.com">SplashLab Social</a> to learn more!</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Drupal Module Dev: Dependent AHAH/AJAX Forms]]></title>
    <link href="http://thaddeusmt.github.com/2010/03/22/learning-drupal-module-dev-dependent-ahahajax-forms/"/>
    <updated>2010-03-22T01:32:00-06:00</updated>
    <id>http://thaddeusmt.github.com/2010/03/22/learning-drupal-module-dev-dependent-ahahajax-forms</id>
    <content type="html"><![CDATA[<p>So, I've been working on a simple module for a Drupal project lately. I wanted to have two administrator settings for the module, the second of which depends on the first. A "dependent dropdown". It would be cool if it was "AJAXy" too, I thought. Well, it just so turns out that in Drupal 6 there are built in <a href="http://ajax.phpmagazine.net/2005/11/ahah_asychronous_html_and_http.html">AHAH</a> (Asychronous HTML and HTTP) functions in the Forms API to do just this. Easy! Or is it?</p>




<p>It also turns out there is a steep learning curve to making "Ajax forms" with the Drupal Forms API. I got it working, but it took a fair amount of effort. So, to help out future Drupal AHAH developers I am providing my code below, along with a list of links to resources that were a great help in unraveling this problem.</p>




<p>First, to help provide an "aerial view" of what's going on here, this is a list of the components involved:</p>




<ul>
<li>A form that has the AHAH fields (<em>ahahtestmodule_admin_settings</em> in this example)</li>
<li>The first field in the form (<em>ahahtestmodule_types</em>), which will change the contents of the second field</li>
<li>The second, "dependent" field (<em>ahahtestmodule_ahah_field</em>)</li>
<li>The function that provides the options of the AHAH field based on the first field (<em>ahahtestmodule_get_ahah_fields()</em>)</li>  
<li>The AHAH function that updates the AHAH field (<em>ahahtestmodule_ahah_field_js()</em>)</li>
<li>menu callback function for the AHAH function (<em>ahahtestmodule/ahahjs</em>)</li>
</ul>




<p>To start out, here is the example admin settings form <em>ahahtestmodule_admin_settings</em> with both fields (<em>ahahtestmodule_types</em> and <em>ahahtestmodule_ahah_field</em>):</p>




<pre><code>&lt;?php 
function ahahtestmodule_admin_settings() {
  $form = array();
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('ahahtestmodule Settings'),
  );
  $form['settings']['ahahtestmodule_types'] = array(
    '#type' => 'radios',
    '#title' => t('First Field'),
    '#description' => t('Change this field to change the options in the next field.'),
    '#options' => array('one' => t('Option 1'), 'two' => t('Option 2'), 'three' => t('Option 3')),
    '#default_value' => variable_get('ahahtestmodule_types', 'one'),
    '#ahah' => array(
      'path' => 'ahahtestmodule/ahahjs',
      'wrapper' => 'ahah-wrapper',
      'method' => 'replace',
    ),
  );
  $form['settings']['ahahtestmodule_ahah_field'] = array(
    '#type' => 'select',
    '#title' => t('Dependent Second Field'),
    '#options' => ahahtestmodule_get_ahah_fields(variable_get('ahahtestmodule_types', 'one')),
    '#default_value' => variable_get('ahahtestmodule_ahah_field', 'none'),
    '#description' => t('This fields content depends on what is selected in the first field.'),
    '#prefix' => '&lt;div id="ahah-wrapper">',
    '#suffix' => '&lt;/div>',
  );
  return system_settings_form($form);
}
?></code></pre>




<p>Next, here is the dummy function that gets the right content for <em>ahahtestmodule_ahah_field</em> based on <em>ahahtestmodule_types</em>:</p>




<pre><code>&lt;?php 
function ahahtestmodule_get_ahah_fields($first_variable) {
  $ahah_fields = array();
  switch ($first_variable) {
    case 'one':
        $ahah_fields['one'] = 'Option 1 Was Selected';
        break;
    case 'two':
        $ahah_fields['two'] = 'Option 2 Was Selected';
        $ahah_fields['two_bonus'] = 'Bonus Option!';
        break;
    case 'three':
        $ahah_fields['three'] = 'Option 3 Was Selected';
        break;
    default:
        $ahah_fields['none'] = 'Please Select...';
  }
  return $ahah_fields;
}
?></code></pre>




<p>Then, here is the magic AHAH callback function that I don't fully understand and ripped right off this article at drupal.org: <a href="http://drupal.org/node/331941">Adding dynamic form elements using AHAH</a>:</p>




<pre><code>&lt;?php 
// The AHAH callback function
function ahahtestmodule_ahah_field_js() {
  // The AHAH callback function triggered by the user changing the first field, "ahahtestmodule_types"
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get for the form from the cache
  $form = form_get_cache($form_build_id, $form_state);
  // Get the form set up to process
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  // Process the form with drupal_process_form(), which calls the submit handlers that put whatever was worthy of keeping in the $form_state
  drupal_process_form($form_id, $form, $form_state);
  // Call drupal_rebuild_form(), which destroys $_POST, creates the form again with hook_form, gets the new form cached and processed again
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  // THIS IS WHAT YOU WILL CUSTOMIZE FOR YOUR OWN FORM
  // Choose the field you want to update with AHAH and render it
  $ahah_form = $form['settings']['ahahtestmodule_ahah_field'];
  unset($ahah_form['#prefix'], $ahah_form['#suffix']);
  $output = drupal_render($ahah_form);
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
?></code></pre>




<p>Lastly, be sure to add the menu callback for <em>ahahtestmodule_ahah_field_js()</em>:

<pre><code>&lt;?php 
function ahahtestmodule_menu() {
  $items = array();
  $items['ahahtestmodule/ahahjs'] = array(
    'page callback' => 'ahahtestmodule_ahah_field_js',
    'access arguments' => array('administer ahahtestmodule'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
?></code></pre>

<p>I rolled this whole thing up into a little demo module that does nothing except run all this code:</p>

<p><strong><a href="http://www.chilipepperdesign.com/examples/ahahtestmodule.zip">Download the Drupal Ahah Test Module</a></strong></p>

<p>Here are some links that I used to figure this out that will hopefully help you too:</p>

<ul>
<li><a href="http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/6#ahah">The Drupal Form API Manual Page (the AHAH section)</a></li>
<li><a href="http://drupal.org/node/331941 ">Adding dynamic form elements using AHAH (GREAT)</a></li>
<li><a href="http://thedrupalblog.com/using-ahah-dynamically-generate-form-elements-and-integration-multi-tiered-taxonomy">Using AHAH to dynamically generate form elements </a></li>
<li><a href="http://wimleers.com/blog/ahah-helper-module">AHAH helper module</a></li>
<li><a href="http://www.drupaler.co.uk/blog/ahah-node-forms-and-select-lists/434">AHAH, Node Forms And Select Lists</a></li>
<li><a href="http://maxeydevbox.org/blogs/geoffmaxey/adventure-ahah-and-drupal-form-api">An Adventure with AHAH and the Drupal Form API</a></li>
<li><a href="http://www.stellapower.net/content/ajax-ifying-drupal-node-forms">AJAX-ifying Drupal Node Forms</a></li>
<li><a href="http://katbailey.net/blog/ahah-drupal-may-it-one-day-live-its-acronym">AHAH in Drupal: may it one day live up to its acronym</a></li>
<li><a href="http://blog.menhir.be/2008/09/27/ahah-forms-in-drupal-6/">Ahah forms in drupal 6</a></li>
<li><a href="http://drupalsn.com/learn-drupal/drupal-tutorials/getting-going-ahah-and-drupal-6">Getting going with AHAH and Drupal 6</a></li>
<li><a href="http://www.nicklewis.org/node/967">Drupal 6 AHAH forms: Making New Fields Work</a></li>
</ul>

<p>A big thanks to the Drupal community as always for putting so much helpful support up online for free!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to programmatically create Views in Drupal 6]]></title>
    <link href="http://thaddeusmt.github.com/2010/01/15/how-to-programmatically-create-views-in-drupal-6/"/>
    <updated>2010-01-15T00:08:00-07:00</updated>
    <id>http://thaddeusmt.github.com/2010/01/15/how-to-programmatically-create-views-in-drupal-6</id>
    <content type="html"><![CDATA[<p>So, this stumped me for a while. I needed my small custom Drupal module to select a bunch of nodes based on a CCK Date field and the Publish status. It is a pain to query the CCK tables directly, so every forum post I could find told me to do this via Views. That's all well and good, but the instructions for doing this all involved creating a View with the Vuiews UI, <em>then</em> calling it to make my query.</p>

<p>But I wanted to have some of the View's query parameters change dynamically based on my module's admin settings. Although you could probably do this with some custom Views Argument PHP code, I didn't want to do it this way. It divorced the code from my module too much somehow. It would mean that after I installed my module I would have to create a View and paste in some custom PHP code! Yuck.</p>

<p>Looking through the Views 2 documentation I learned how to create "default views" for a module, but still I didn't like this approach. This would mean that the custom view would still appear in the Views list, and could be disabled, modified, and what have you. What I really wanted to do was just create a View programmatically in my module code. How hard could it be?</p>

<p>With Views 1 it was apparently easy to do this with the <em>views_build_view()</em> method, and I found "many":http://drupal.org/node/138828 "articles":http://drupal.org/node/99721 explaining how. But I am using Views 2, so these were of no help.</p>

<p>Some poking around in the Views code showed me the way, however, and it turns out it's pretty easy after all.</p>

<p>Basically, all you need to do is create a view using the Views UI then Export it to get most of the code. You can't quite use the exported code as-is though. You need to replace the first line of the export code (<em>$view = new view;</em>) with (<em>$view = views_new_view();</em>). It basically does the same thing. Once you've replaced that line you can create a view anywhere you want in your module's code. You can then execute, embed it, or whatever you want by calling the appropriate functions (like <em>$view->execute_display('default', array())</em>). Here is a piece of example code using a simple view that displays the Title field of all Published nodes:</p>

<pre><code>//create a new view
$view = views_new_view();
//define the view (this code was generated by the Export)
$view->name = 'test_date_view';
$view->description = '';
$view->tag = '';
$view->view_php = '';
$view->base_table = 'node';
$view->is_cacheable = FALSE;
$view->api_version = 2;
$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
$handler = $view->new_display('default', 'Defaults', 'default');
$handler->override_option('fields', array(
  'title' => array(
    'label' => 'Title',
    'alter' => array(
      'alter_text' => 0,
      'text' => '',
      'make_link' => 0,
      'path' => '',
      'alt' => '',
      'prefix' => '',
      'suffix' => '',
      'help' => '',
      'trim' => 0,
      'max_length' => '',
      'word_boundary' => 1,
      'ellipsis' => 1,
      'html' => 0,
    ),
    'link_to_node' => 1,
    'exclude' => 0,
    'id' => 'title',
    'table' => 'node',
    'field' => 'title',
    'relationship' => 'none',
  ),
));
$handler->override_option('filters', array(
  'status' => array(
    'operator' => '=',
    'value' => '1',
    'group' => '0',
    'exposed' => FALSE,
    'expose' => array(
      'operator' => FALSE,
      'label' => '',
    ),
    'id' => 'status',
    'table' => 'node',
    'field' => 'status',
    'relationship' => 'none',
  ),
  ),
));
$handler->override_option('access', array(
  'type' => 'none',
));
$handler->override_option('cache', array(
  'type' => 'none',
));
$handler->override_option('row_options', array(
  'inline' => array(),
  'separator' => '',
));
// now output the view (or whatever you want to do with it)
print $view->execute_display('default', array());
</code></pre>


<p>I posted this over in the "Drupal documentation":http://drupal.org/node/685432 as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Loops for Custom Taxonomies in WordPress 2.8]]></title>
    <link href="http://thaddeusmt.github.com/2009/09/23/custom-loops-for-custom-taxonomies-in-wordpress-28/"/>
    <updated>2009-09-23T18:24:00-06:00</updated>
    <id>http://thaddeusmt.github.com/2009/09/23/custom-loops-for-custom-taxonomies-in-wordpress-28</id>
    <content type="html"><![CDATA[<p>"WordPress 2.8":http://codex.wordpress.org/Version_2.8 saw a big expansion and enhancement of it's "Taxonomy API":http://codex.wordpress.org/WordPress_Taxonomy, allowing for easy creation of custom taxonomies. The default WordPress "category" and "tag" taxonomies are sufficient for most blogs, but the ability to define additional sets of terms ("vocabularies") makes the platform a much more flexible and powerful Content Management System than it was before. Ever since "Justin Tadlock":http://justintadlock.com/archives/2009/05/06/custom-taxonomies-in-wordpress-28 opened my eyes to how to create and use additional taxonomies, it seems like every WordPress project I work on needs one or two extra vocabularies. :)</p>

<p>Working with Drupal as much as I have, I became very accustomed to having multiple taxonomies. It's incredibly useful. A classic example is Movies: each movie has a director, some actors, a year it was made, etc. You <em>could</em> just lump all these together with a bunch of "tags" in WordPress, but grouping "Actor" and "Year" tags together into taxonomies makes site organization and navigation much simpler (and more sensible).</p>

<p>But there are some challenges still to using WordPress taxonomies. While there is some support in the new API word making queries based on specific taxonomies, there is not a lot. You <em>can</em> filter your Loop by a term in a single taxonomy via the <em>query_posts()</em>, as "Justin":http://justintadlock.com/archives/2009/05/06/custom-taxonomies-in-wordpress-28 shows in this example:</p>

<pre><code><?php 
query_posts( array( 'people' => 'will-smith', 'showposts' => 10 ) ); 
?></code></pre>


<p>Only posts tagged with actor "Will Smith" in the "people" taxonomy will be returned. But what if you want to return posts that tagged with multiple tags in your taxonomy? Or if you want to return posts that are tagged in <em>two</em> custom taxonomies? What about posts with a specific custom field <em>and</em> custom taxonomy?</p>

<p>For advanced WordPress post ("Loop") queries it's necessary to roll up your sleeves and write some SQL. There are two ways to do this. The first is to add a filter function to the regular <em>query_posts()</em> method:</p>

<pre><code><?php
function filter_where($where = '') {
    $where .= " AND post_date <= '".date('Y-m-d')."'";
    return $where;
}
add_filter('posts_where', 'filter_where');
query_posts($query_string);
if (have_posts()) : 
    while (have_posts()) : 
        the_post();
        //display your post data with the usual functions like the_title(), etc
    endwhile;
endif;
?></code></pre>


<p>The other way - which is less verbose and easier to comprehend - is to straight-up write your own SQL statement, a la this WordPress Codex "article on Custom Queries":http://codex.wordpress.org/Custom_Queries. Rather than try to teach any SQL, I'll just provide a couple examples.</p>

<p>Here is a query that selects posts which have the MyCustomField custom field value set to "my custom value" <em>and</em> are tagged "mytag" in the custom "mytaxonomy":</p>

<pre><code><?php
$querystr = "
    SELECT *
    FROM $wpdb->posts as wpost
    INNER JOIN $wpdb->postmeta  ON (wpost.ID = $wpdb->postmeta.post_id)
    AND $wpdb->postmeta.meta_key = 'MyCustomField' 
    AND $wpdb->postmeta.meta_value = 'my custom value' 
    INNER JOIN $wpdb->term_relationships  ON (wpost.ID = $wpdb->term_relationships.object_id)
    INNER JOIN $wpdb->term_taxonomy ON ($wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id)
    AND $wpdb->term_taxonomy.taxonomy = 'mytaxonomy'
    AND $wpdb->term_taxonomy.term_id IN (mytag)
    WHERE wpost.post_status IN ('publish')
    ORDER BY wpost.post_date ASC
    ";
$pageposts = $wpdb->get_results($querystr, OBJECT);
if ($pageposts): 
    foreach ($pageposts as $post): 
        setup_postdata($post);
        //display your post data with the usual functions like the_title(), etc
    endforeach;
endif;
?></code></pre>


<p><em>Notice that the Loop is set up differently! It is a </em>foreach<em> instead of a </em>while<em>, and you must call </em>setup_postdata($post)<em> instead of </em>just the_post()<em> to set up the global post variables.</em></p>

<p>Here is one more example that queries posts with terms in <em>two</em> different custom taxonomies, and with which the MyCustomField custom field value is set to anything <em>but</em> "my custom value" (just to make it interesting):</p>

<pre><code><?php
$querystr = "
SELECT *
    FROM $wpdb->posts as wpost      
    INNER JOIN $wpdb->term_relationships r1
    ON (wpost.ID = r1.object_id)
    INNER JOIN $wpdb->term_taxonomy t1
    ON (r1.term_taxonomy_id = t1.term_taxonomy_id)
    AND t1.taxonomy IN ('firstcustomtaxonomy')
    AND t1.term_id IN ('aTaxonomyTerm')
    INNER JOIN $wpdb->term_relationships r2
    ON (wpost.ID = r2.object_id)
    INNER JOIN $wpdb->term_taxonomy t2
    ON (r2.term_taxonomy_id = t2.term_taxonomy_id)
    AND t2.taxonomy IN ('secondcustomtaxonomy')
    AND t2.term_id IN ('anotherTaxonomyTerm')
    WHERE wpost.ID NOT IN 
        (SELECT m.post_id FROM wp_postmeta m 
         WHERE m.meta_key = 'MyCustomField' 
         AND m.meta_value = 'my custom value')
    AND post_status IN ('publish')
    ORDER BY wpost.post_date ASC
    ";
$pageposts = $wpdb->get_results($querystr, OBJECT);
if ($pageposts): 
    foreach ($pageposts as $post): 
        setup_postdata($post);
        //display your post data with the usual functions like the_title(), etc
    endforeach;
endif;
?></code></pre>


<p>Have fun making powerful, custom websites with the new WordPress 2.8 and it's custom taxonomies!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Integrate (Import) WordPress Content into Magento Blocks]]></title>
    <link href="http://thaddeusmt.github.com/2009/04/26/how-to-integrate-import-wordpress-content-into-magento-blocks/"/>
    <updated>2009-04-26T23:10:00-06:00</updated>
    <id>http://thaddeusmt.github.com/2009/04/26/how-to-integrate-import-wordpress-content-into-magento-blocks</id>
    <content type="html"><![CDATA[<p>This is the technique I use to integrate "WordPress":http://wordpress.org/ content into "Magento":http://www.magentocommerce.com/. This can be useful for bringing in posts related to a product, or having recent blog posts on the Magento home page... whatever you can dream up. No modules, plugins or extensions are needed for this technique - just a good grasp of PHP and the Magento and WordPress theming/templating systems. There are probably many other ways to do this, but this is an easy way that I figured out which works well for my purposes so far.</p>

<p><em>First, the WordPress side of the process.</em></p>

<p>Step #1 is to create a wordpress page which will have the content we want to show in Magento. The trick is that we don't want the WordPress header or footer - we just want the content. To do this we will create a new page template. In your WordPress theme directory, copy a file with a "Loop":http://codex.wordpress.org/The_Loop in it (<em>index.php</em> or <em>page.php</em> are a good ones to start with) and rename the new file something like <em>MagentoContent.php</em>. Edit this new file, and place at the top something like:</p>

<pre><code><?php
/*
Template Name: MagentoContent
*/
?></code></pre>


<p>This declares <em>MagentoContent.php</em> as a page template file. Then remove the function calls that pull in the Header, Footer and Sidebar. They usually look like this:</p>

<pre><code><?php get_header(); ?>
<?php get_sidebar(); ?>
<?php get_footer(); ?></code></pre>


<p>And finally customize the Loop so it retrieves just the content you want. For instance, if you want to get the three most recent posts tagged "Magento" and show the title and excerpt it would look something like this:</p>

<pre><code><?php query_posts('tag=Magento&limit=3'); ?>
<?php if (have_posts()) : ?>
    <?php while (have_posts()) : the_post(); ?>
        <a href="<?php the_permalink(); ?>" title="<?php the_title(); ?>">
            <?php the_title(); ?>
        </a>
        <p><?php the_excerpt(); ?></p>
        <p><a href="<?php the_permalink(); ?>">Read more...</a></p>
    <?php endwhile; ?>
<?php else : ?>
    <p>Sorry no content found.</p>
<?php endif; ?></code></pre>


<p>Do whatever you want here though. Get to know your way around "query_posts":http://codex.wordpress.org/Template_Tags/query_posts and go to town.</p>

<p>The final step on the WordPress side is to login to the backend and create a Page. Select the <em>MagentoContent</em> page template we created and Publish the page. If you used a custom post query it doesn't matter what it's called or what the content is. (If you actually want to bring the page's content in to Magento, instead of the custom query, then it does of course.) Make a note of the URL of this page. If you have nice "Permalinks":http://codex.wordpress.org/Using_Permalinks set up and called the page <em>Mage_content</em> it will probably be something like this: http://example.com/wordpress/Mage_content. Visit the URL to make sure it's returning the content you want. It will be an ugly page without the Header and Footer, but the content is what's important. When this content is in Magento the Magento stylesheets can be used to style it.</p>

<p><em>Now let's do the Magento side of things.</em></p>

<p>Create a new Magento template file. For this example, we'll create one called <em>wordpress_block.phtml</em> and put it in the <em>/cms</em> folder of our theme directory. The file will just contain a short snippit of PHP code that uses the "CURL":http://us.php.net/curl library to get the contents of the WordPress page we just created (You can do this other ways, but Magneto already requires the CURL library so we know it's at our disposal).</p>

<p>Technically code like this should be in a Controller function in a custom Magento extension, but it's <em>way</em> faster to just throw it in the .phtml file. Here's the code, using the WordPress page URL from our example:</p>

<pre><code><?php 
$content = '';
$url = "http://example.com/wordpress/Mage_content";
$ch = curl_init();
curl_setopt ($ch, CURLOPT_URL, $url);
curl_setopt ($ch, CURLOPT_HEADER, 0);
ob_start();
curl_exec ($ch);
curl_close ($ch);
$content = ob_get_contents();
ob_end_clean();
echo $content; 
?></code></pre>


<p>Now that we have our block, just add it to a Layout file in your Magento theme (or to the Custom Layout options on an individual CMS or Category page):</p>

<pre><code><block type="core/template" name="wordpress_block" template="cms/wordpress_block.phtml" /></code></pre>


<p>And voila - we are now pulling WordPress content into Magento. It is probably a good idea to install a wordpress caching plugin like "WP Super Cache":http://wordpress.org/extend/plugins/wp-super-cache/ to speed up requests for <em>Mage_content</em>. In fact, the proper way to do this would be to also create a Magento module which caches it... but that's beyond the scope of this little tutorial. This is a barebones proof of concept which can be adapted to specific needs.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
